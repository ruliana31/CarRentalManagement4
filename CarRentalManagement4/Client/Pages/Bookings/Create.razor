@page "/bookings/create/"

@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Booking</h3>>
<hr />
<br />

<EditForm Model="@booking" OnValidSubmit="CreateBooking">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Vehicle: </label>
        <div>
            <select @bind="booking.VehicleId" class="form-control">
                <option value="">-- Select Vehicle --</option>
                @if (Vehicles != null)
                {
                    foreach (var vehicle in Vehicles)
                    {
                        <option value="@vehicle.Id">@vehicle.Make.Name @vehicle.Model.Name | @vehicle.LicensePlateNumber</option>
                    }
                }
            </select>
            <ValidationMessage For="@(() => booking.VehicleId)" />
        </div>
    </div>
    <div class="form-group">
        <label>Customer: </label>
        <div>
            <InputSelect @bind-Value="booking.CustomerId" class="form-control">
                <option value="">-- Select Customer --</option>
                @if (Customers != null)
                {
                    foreach (var customer in Customers)
                    {
                        <option value="@customer.Id">@customer.TaxId | @customer.EmailAddress</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => booking.CustomerId)" />
        </div>
    </div>

    <div class="form-group">
        <label>Date Out:</label>
        <div>
            <InputDate @bind-Value="@booking.DateOut" class="form-control"/>
            <ValidationMessage For="@(() => booking.DateOut)" />
        </div>
    </div>


    <button type="submit" class="btn btn-success btn-block">
        Create Booking
    </button>
</EditForm>

@code {
    Booking booking = new Booking {
            DateOut = DateTime.Now.Date
        };
        private IList<Vehicle> Vehicles;
        private IList<Customer> Customers;

        protected async override Task OnInitializedAsync()
        {
            Customers = await _client.GetFromJsonAsync<List<Customer>>(Endpoints.CustomersEndpoint);
            Vehicles = await _client.GetFromJsonAsync<List<Vehicle>>($"{Endpoints.VehiclesEndpoint}");
        }

        private async Task CreateBooking()
        {
            await _client.PostAsJsonAsync(Endpoints.BookingsEndpoint, booking);
            _navManager.NavigateTo("/bookings/");
        }
}